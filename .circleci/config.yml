version: 2.1

workflows:
  version: 2
  main:
    jobs:
      - unittest

      - build-docker:
          requires:
            - unittest


aliases:
  hash_deps: &hash_deps
    run:
      name: Hash Requirement files
      command: |
        python .circleci/hash_requirement_files.py > .circleci/PIP_CACHE_KEY
        cat .circleci/PIP_CACHE_KEY

  restore_pip_cache: &restore_pip_pre_commit_cache
    restore_cache:
      keys:
        - pip-v1-{{ .Branch }}-{{ checksum ".circleci/PIP_CACHE_KEY" }}

  install_pip_deps: &install_pip_deps
    run:
      name: Install Dependencies
      command: |
        echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV
        source $BASH_ENV
        pip install --user pip -U
        pip install --user codecov -r requirements/prod.txt -r requirements/dev.txt

  save_pip_cache: &save_pip_pre_commit_cache
    save_cache:
      key: pip-v1-{{ .Branch }}-{{ checksum ".circleci/PIP_CACHE_KEY" }}
      paths:
        - /home/circleci/.cache/pip
        - /home/circleci/.cache/pre-commit

  upload_codecov_report: &upload_codecov_report
    run:
      when: on_success
      name: Upload Coverage Report
      command: codecov

  restore_test_data_cache: &restore_test_data_cache
    restore_cache:
      keys:
        - test-data-mysql-v1-{{ .Branch }}-{{ checksum ".circleci/test_data_version" }}
        - test-data-mysql-v1-{{ .Branch }}-
        - test-data-mysql-v1-

  save_test_data_cache: &save_test_data_cache
    save_cache:
      key: test-data-mysql-v1-{{ .Branch }}-{{ checksum ".circleci/test_data_version" }}
      paths:
        - /home/circleci/project/tests_data



jobs:
  build-docker:
    docker:
      - image: circleci/python:3.7

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true    # default - false

      - run:
          name: Try Build Docker
          command: |
            docker build -t api-server -f Dockerfile --build-arg DAO_COMMIT_SHA=$CIRCLE_SHA1 .
            docker build -t spider -f Dockerfile.spider --build-arg DAO_COMMIT_SHA=$CIRCLE_SHA1 .

  unittest:
    docker:
      - image: circleci/python:3.7

      - image: redis:2.8
        command: redis-server --requirepass "redis_password"

      - image: mysql:5.7
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci
        environment:
          MYSQL_USER: root
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: bgm_ip_viewer

    environment:
      MYSQL_HOST: 127.0.0.1
      MYSQL_USER: root
      MYSQL_PASSWORD: root_password
      MYSQL_DB: bgm_ip_viewer
      REDIS_HOST: 127.0.0.1
      REDIS_PASSWORD: redis_password
      BGM_TV_AUTO_TRACKER_APP_SECRET: 3e452da34f146314694a0e1e7f23b722
      BGM_TV_AUTO_TRACKER_APP_ID: bgm2955b3b3050e7bf2
      VIRTUAL_HOST: 127.0.0.1:8000
      PROTOCOL: http
      COMMIT_SHA: 'dev'

    steps:
      - checkout # check out the code in the project directory
      - *hash_deps
      - *restore_pip_pre_commit_cache
      - *install_pip_deps

      - run:
          name: Code Style
          command: pre-commit run --all-files

      - *save_pip_pre_commit_cache
      - *restore_test_data_cache
      - run: sudo apt-get install default-mysql-client -y
      - run:
          name: Wait for MySQL Ready
          command: |
            # wait for mysql start up
            for i in `seq 1 100`;
              do
                nc -z 127.0.0.1 3306 && echo Success && exit 0
                echo -n .
                sleep 0.1
              done
            echo Failed waiting for MySQL && exit 1

      - run:
          name: Setup Test MySQL Database
          command: |
            if [[ ! -f ./tests_data/all.sql ]];then
              mkdir -p ./tests_data
              wget https://github.com/Trim21/personal-website/releases/download/test_data/mysql-1.sql -O ./tests_data/all.sql
            fi

            MYSQL_CLIENT_ARGS="--host $MYSQL_HOST --database=$MYSQL_DB -u root -p$MYSQL_PASSWORD"
            mysql $MYSQL_CLIENT_ARGS < ./tests_data/all.sql

      - *save_test_data_cache

      - run:
          name: UnitTest
          command: PYTHONPATH=. coverage run -m pytest

      - *upload_codecov_report
